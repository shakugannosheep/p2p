<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="600" height="380" creationComplete="init()" >
	<s:states>
		<s:State name="Login"/>
		<s:State name="Invite"/>
		<s:State name="Called"/>
		<s:State name="Talk"/>
		<s:State name="Register"/>
		<s:State name="Setting"/>
	</s:states>
	<fx:Declarations>
		<mx:StringValidator id="_username" property="text" required="true" minLength="6" maxLength="16" requiredFieldError="用户名不能为空" tooShortError="用户名长度必须大于6个字符" tooLongError="用户名长度必须小于16个字符" />
		<mx:StringValidator id="_password" property="text" required="true" minLength="8" maxLength="20" requiredFieldError="密码不能为空" tooShortError="密码长度必须大于8个字符" tooLongError="密码长度必须小于20个字符" />
		<s:RemoteObject id="service" destination="amfphp" source="p2p" fault="service_faultHandler(event)">
			<s:method name="validate" result="validate_resultHandler(event)" />
			<s:method name="register" result="register_resultHandler(event)" />
			<s:method name="setUserData" result="setUserData_resultHandler(event)" />
			<s:method name="getFriendList" result="getFriendList_resultHandler(event)" />
			<s:method name="getUserData" result="getUserData_resultHandler(event)" />
			<s:method name="addFriend" result="addFriend_resultHandler(event)" />
		</s:RemoteObject>
		<s:RadioButtonGroup id="audio"/>
		<s:RadioButtonGroup id="video"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;

			//Circus服务器域名及开发者ID
			private var adobeurl:String = "rtmfp://stratus.adobe.com/1710124cbf69e3f25b780c13-d6cbf2cb35a1";
			private var localurl:String = "rtmfp://172.22.224.173:1935";
			private var netConnection:NetConnection;
			
			//存储当前登录用户的相关信息	
			private var userid:Number;  //唯一标识ID
			private var localpeerid:String;  //邀请方唯一PeerID。成功登录后从Circus服务器获取
			private var localusername:String;  //唯一用户名。用于各种提示上的内容显示
			private var remotepeerid:String;  //被邀请方唯一PeerID。成功登录后从服务器获取
			
			//用于绑定好友列表并向其提供数据
			[Bindable]
			private var friendlist:ArrayCollection = new ArrayCollection();
			
			private var mic:Microphone;
			private var cam:Camera;
			private var micst:SoundTransform;
			private var speakerst:SoundTransform;
			
			//网络流
			private var mystream:NetStream;  //本地流，用于广播PeerID
			private var controlstream:NetStream;  //控制流，用于邀请时播放远端PeerID
			private var instream:NetStream;  //输入流，获取对方的多媒体内容
			private var outstream:NetStream;  //输出流，输出本地的多媒体内容
			
			private var remotevideo:Video;
			private var localvideo:Video;
			
			private var usernameIsVaild:Boolean = false;
			private var passwordIsVaild:Boolean = false;
			
			//Login & Register Start
			
			//初始化函数
			private function init():void
			{
				_username.source = username;
				_password.source = password;
				mic = Microphone.getMicrophone();
				if( !mic )
				{
					Alert.show("未检测到麦克风，无法使用音频通话功能","设备错误");
				}
				cam = Camera.getCamera();
				if( !cam )
				{
					Alert.show("未检测到摄像头，无法使用视频通话功能","设备错误");
				}
				else
				{
					cam.setQuality(0,90);
				}
			}
			
			
			//跳转至注册页面
			private function startRegister():void
			{
				currentState = "Register";
				_username.source = registerusername;
				_password.source = registerpassword;
			}
			
			//提交注册内容
			private function submitRegister():void
			{
				_registerbutton.label = "注册中...";
				_registerbutton.enabled = false;
				if( validateString(registerusername.text,6,16) && validateString(registerpassword.text,8,20) )
				{
					//Alert.show("Request Sended");
					service.register.send( registerusername.text, registerpassword.text );					
				}
				else
				{
					Alert.show("请检查您的输入内容是否合法","用户输入错误");
					_registerbutton.label = "完成注册";
					_registerbutton.enabled = true;
				}
			}
			
			private function register_resultHandler(event:ResultEvent):void
			{
				var result:Number = event.message.body.toString();
				
				switch( result )
				{
					case 0:
						Alert.show("注册失败","服务器错误");
						_registerbutton.label = "完成注册";
						_registerbutton.enabled = true;
						break;
					case 1:
						Alert.show("注册成功","服务器操作成功");
						currentState = "Login";
						break;
					default:
						Alert.show("服务器返回值非法","服务器错误");
						break;
				}
			}
			
			//用于同AmfPHP的Service连接时的事件处理
			private function service_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultDetail);
				Alert.show(event.fault.faultString);
			}
			
			private function validateString( source:String, min:Number, max:Number ):Boolean
			{
				return (source.length >= min) && (source.length <= max);
			}
			
			//登录
			private function login():void
			{
				_loginbutton.enabled = false;
				_loginbutton.label = "登录中...";
				//对usernaem和password中的内容进行验证	
				if( validateString(username.text,6,16) && validateString(password.text,8,20) )
				{
					//Alert.show("Request Sended");
					service.validate.send( username.text, password.text );					
				}
				else
				{
					Alert.show("请检查您的输入内容是否合法","用户输入错误");
					_loginbutton.enabled = true;
					_loginbutton.label = "登录";
				}
			}
			
			//用于对服务器返回的数据进行逻辑处理
			private function validate_resultHandler(event:ResultEvent):void
			{
				var object:Object = event.message.body;
				var result:Number = object.result.toString();
				
				/*
				case中内容为不同状态：
				0 => 验证通过
				1 => 用户名或密码错误
				2 => 用户名不存在
				*/
				switch(result)
				{
					case 0:
						userid = object.userid.toString();
						connect();
						break;
					case 1:
						Alert.show("用户名或密码错误","身份验证错误");
						break;
					case 2:
						Alert.show("该用户名不存在","身份验证错误");
						break;
					case 3:
						Alert.show("数据库连接错误","服务器错误");
						break;
					default:
						Alert.show("服务器返回值非法","服务器错误");
						break;
				}
				if( result != 0)
				{
					_loginbutton.enabled = true;
					_loginbutton.label = "登录";
				}
			}
			
			//点击添加好友时触发函数
			private function addFriend():void
			{
				if(friendname.text.length > 0)
				{
					service.addFriend.send(userid,friendname.text);
				}
				else
				{
					Alert.show("请输入需要添加的好友名字","用户输入错误");
				}
			}
			
			//addFriend事件处理函数
			private function addFriend_resultHandler(event:ResultEvent):void
			{	
				var result:Number = event.message.body.toString();
				/*
				case中内容为不同状态：
				0 => 添加失败
				1 => 添加成功
				2 => 未找到指定名字的好友
				3 => 添加自己为好友
				*/
				switch(result)
				{
					case 0:
						Alert.show("添加好友失败","服务器错误");
						break;
					case 1:
						Alert.show("添加好友成功","服务器操作成功");
						friendname.text = "";
						service.getFriendList.send(userid);
						break;
					case 2:
						Alert.show("未找到指定名称的好友","好友添加错误");
						break;
					case 3:
						Alert.show("不能添加自己为好友","好友添加错误");
						break;
				}
			}
			
			//通过服务器验证后同Circus服务器进行连接
			private function connect():void
			{
				netConnection = new NetConnection();
				netConnection.addEventListener(NetStatusEvent.NET_STATUS,netConnection_statusHandler);
				netConnection.connect(localurl);
			}
			
			//与Circus服务器之间连接的事件处理
			private function netConnection_statusHandler(event:NetStatusEvent):void
			{
				switch (event.info.code)
				{
					//链接成功后的初始化
					case "NetConnection.Connect.Success":
						localpeerid = netConnection.nearID;
						localusername = username.text;
						service.setUserData.send(userid,localpeerid,1);
						initMyStream();
						break;
					case "NetStream.Connect.Success":
						break;
					default:
						//Alert.show(event.info.code);
						break;
				}
			}
			
			//初始化mystream，instream和outstream
			private function initMyStream():void
			{
				//广播本地PeerID并等待连接
				mystream=new NetStream(netConnection,NetStream.DIRECT_CONNECTIONS);
				mystream.addEventListener(NetStatusEvent.NET_STATUS,netStreamHandler);
				mystream.publish(localpeerid);
				
				//Callee端的监听器
				var obj:Object=new Object();
				obj.onPeerConnect=function(subscriberstream:NetStream):Boolean
				{
					//初始化输入流并按邀请方（caller）进行播放
					instream=new NetStream(netConnection,subscriberstream.farID);
					instream.addEventListener(NetStatusEvent.NET_STATUS,inStreamHandler);
					instream.play("caller");
					
					//设置输入流是否接受对面端的视频流和音频流
					instream.receiveAudio(false);
					instream.receiveVideo(false);
					
					var i:Object=new Object();
					//获取对方的文字信息
					i.getMessage=function(name:String,value:String):void
					{
						info.text += name + " : " + value + "\n";
					}
					//获取对方邀请
					i.getInvite=function(name:String):void
					{
						currentState = "Called";
						calledtext.text = name + "正在邀请您，是否接受？";
					}
					//对方通知会话已结束
					i.connectEnd=function():void
					{
						stopTalk();
					}
					instream.client=i;
					
					return true;
				}
				mystream.client=obj;
			}
			
			//被邀请方接受邀请
			private function acceptInvite():void
			{
				currentState = "Talk";
				_calling.visible = false;
				_talk.enabled = true;
				//初始化输出流并按被邀请方（callee）进行广播
				outstream = new NetStream(netConnection,NetStream.DIRECT_CONNECTIONS);
				outstream.addEventListener(NetStatusEvent.NET_STATUS,outAcceptStreamHandler);
				outstream.publish("callee");
				
				//将本地的音频和视频内容附加到输出流中
				enableAudio(true);
				enableVideo(true);
				
				//将对方传输的音频流和视频流附加到输入流中
				instream.receiveAudio(true);
				instream.receiveVideo(true);
				
				//初始化远程视频窗口
				remotevideo = new Video(160,120);
				remotevideo.attachNetStream(instream);
				remotevideodisplay.addChild(remotevideo);
				
				//更新用户状态
				service.setUserData.send(userid,localpeerid,3);
				//Alert.show("OnConnectSuccess Sended");
			}
			
			//邀请方开始进行邀请
			private function startInvite():void
			{
				//Alert.show("Start Invite");
				//判断好友列表中是否有在线好友被选中
				if(friend.selectedItem)
				{
					//Alert.show(friend.selectedItem.id.toString());
					service.getUserData.send(friend.selectedItem.id);
				}
				else
				{
					Alert.show("请选择您想要邀请的好友","用户输入错误");
				}
				//Alert.show(friend.selectedItem);
			}
			
			private function getUserData_resultHandler(event:ResultEvent):void
			{
				remotepeerid = event.message.body.toString();
				if( remotepeerid.length > 0 )
				{
					//更改现有状态，调整布局
					currentState = "Talk";
					_calling.visible = true;
					_talk.enabled = false;
					
					//将好友列表中对方的PeerID存入remotepeerid中
					
					//控制流开始接收对方peerid来和对方进行连接
					controlstream = new NetStream(netConnection,remotepeerid);
					controlstream.addEventListener(NetStatusEvent.NET_STATUS,netStreamHandler);
					controlstream.play(remotepeerid);
					
					//初始化输出流并按邀请方（caller）进行广播
					outstream = new NetStream(netConnection,NetStream.DIRECT_CONNECTIONS);
					outstream.addEventListener(NetStatusEvent.NET_STATUS,outInviteStreamHandler);
					outstream.publish("caller");
					
					enableAudio(true);
					enableVideo(true);
					
					//初始化输入流并按被邀请方（callee）进行播放
					instream=new NetStream(netConnection,remotepeerid);
					instream.addEventListener(NetStatusEvent.NET_STATUS,inStreamHandler);
					instream.play("callee");
					
					//添加音量调节
					
					
					//Caller端的监听器
					var i:Object=new Object();
					i.getMessage=function(name:String,value:String):void
					{
						info.text += name + " : " + value + "\n";
					}
					i.getInvite=function(name:String):void
					{
						currentState = "Called";
						calledtext.text = name + "正在邀请您，是否接受？";
					}
					//Caller端监听器添加的功能，用于响应callee端对邀请的接收
					i.connectSuccess=function(name:String):void
					{
						//更新用户状态
						service.setUserData.send(userid,localpeerid,3);
						if(currentState == "Talk" )
						{
							Alert.show("与"+name+"连接成功\n");
						}
						_calling.visible = false;
						_talk.enabled = true;
						currentState = "Talk";
						instream.receiveAudio(true);
						instream.receiveVideo(true);
						remotevideo=new Video(160,120);
						remotevideo.attachNetStream(instream);
						remotevideodisplay.addChild(remotevideo);
					}
					i.connectEnd=function():void
					{
						stopTalk();
					}
					instream.client=i;
					service.setUserData.send(userid,localpeerid,2);
					callingtext.text = "正在邀请"+friend.selectedItem.name.toString()+"，请等待......";
					_talk.enabled = false;	
				}
				else
				{
					Alert.show("该用户离线或正在与他人进行会话");
				}
			}
			
			/*结束邀请时调用，情况如下：
			1、邀请方取消邀请
			2、被邀请方拒绝邀请
			3、成功进行会话后任意一方关闭会话
			4、用户关闭程序或程序非正常退出
			*/
			private function cancelInvite():void
			{
				//向对方发送会话结束标识
				outstream.send("connectEnd");
				stopTalk();
			}

			//会话结束时调用
			private function stopTalk():void
			{
				//回复登陆后状态重新进行等待或邀请
				Alert.show("链接已断开");
				currentState = "Invite";
				
				//初始化所有网络流和视频窗口
				if(instream)
				{
					instream.close();
					instream.removeEventListener(NetStatusEvent.NET_STATUS,inStreamHandler);
				}
				if(outstream)
				{
					outstream.close();
					outstream.removeEventListener(NetStatusEvent.NET_STATUS,outInviteStreamHandler);
				}
				if(controlstream)
				{
					controlstream.close();
					controlstream.removeEventListener(NetStatusEvent.NET_STATUS,netStreamHandler);
				}
				
				instream=null;
				outstream=null;
				controlstream=null;
				
				if(localvideo!=null)
				{
					localvideo.attachCamera(null);
				}
				if(remotevideo!=null)
				{
					remotevideo.attachNetStream(null);
				}
				localvideodisplay.removeChild(localvideo);
				remotevideodisplay.removeChild(remotevideo);
				
				//重新构建网络流，更新用户状态
				initMyStream();
				service.setUserData.send(userid,localpeerid,1);
			}
					
			//控制流事件处理函数，暂时为空
			private function netStreamHandler(event:NetStatusEvent):void
			{
				
			}
			
			//输入流事件处理函数，暂时为空
			private function inStreamHandler(event:NetStatusEvent):void
			{
				
			}
			
			//输出流进行邀请时事件处理函数
			private function outInviteStreamHandler(event:NetStatusEvent):void
			{
				/*有以下情况会触发该事件处理函数：
				1、用户间建立连接
				2、用户间取消连接
				3、用户间的连接由于其他原因关闭
				该函数暂时只处理第一种情况
				*/
				if (event.info.code == "NetStream.Play.Start" )
				{
					outstream.send("getInvite",localusername);
				}
			}

			//输出流接受邀请时事件处理函数
			private function outAcceptStreamHandler(event:NetStatusEvent):void
			{
				outstream.send("connectSuccess",localusername);
			}
			
			//更新用户状态时的事件处理函数
			private function setUserData_resultHandler(event:ResultEvent):void
			{
				var result:Number = event.message.body.toString();
				
				switch(result)
				{
					/*
					case中内容为不同状态：
					0 => 更新失败
					1 => 更新成功
					*/
					case 0:
						Alert.show("服务器更新失败");
						break;
					case 1:
						service.getFriendList.send(userid);
						//Alert.show("登陆成功");
						if( currentState == "Login" )
						{
							currentState = "Invite";
						}
						break;
					default:
						Alert.show("服务器返回值非法");
						break;
				}
			}
		
			//获取用户信息时的事件处理函数
			private function getFriendList_resultHandler(event:ResultEvent):void
			{
				//将获取到的好友信息整理到friendlist中，格式为{id:"",name:""}
				var result:Array = event.message.body as Array;
				//调用前清理friendlist防止多次插入
				friendlist.removeAll();
				for(var i:Number = 0; i < result.length; i++)
				{	
					friendlist.addItem({id:result[i].id,name:result[i].username});
				}
			}		
			
			//向对方发送文字数据
			private function sendMessage():void
			{
				if(outstream)
				{
					outstream.send("getMessage",username.text,message.text);
					info.text += localusername + " : " + message.text + "\n";
					message.text = "";
				}
			}
			
			//将音频内容附加到输出流中
//			private function publishAudio():void
//			{
//				
//			}
//			
//			//将视频内容附加到输出流中
//			private function publishVideo():void
//			{
//				var cam:Camera;
//				cam = Camera.getCamera();
//				if(cam!=null)
//				{
//					outstream.attachCamera(cam);
//					cam.setQuality(0,90);
//				}
//				else
//				{
//					Alert.show("未检测到摄像头");
//				}
//				
//				//初始化本地视频窗口
//				
//			}
			
			private function startSetting():void
			{
				currentState = "Setting";
			}
			
			private function endSetting():void
			{
				currentState = "Talk";
			}
			
			//设置音频及视频
			private function settingAudio(isEnable:Boolean):void
			{
				if( isEnable )
				{
					audioenable.selected = true;
					audiodisable.selected = false;
				}
				else
				{
					audioenable.selected = false;
					audiodisable.selected = true;
				}
				enableAudio(isEnable);
			}
			
			private function settingVideo(isEnable:Boolean):void
			{
				if( isEnable )
				{
					videoenable.selected = true;
					videodisable.selected = false;
				}
				else
				{
					videoenable.selected = false;
					videodisable.selected = true;
				}
				enableVideo(isEnable);
			}
			
			private function enableVideo(isEnable:Boolean):void
			{
				if(isEnable)
				{
					localvideo=new Video(160,120);
					outstream.attachCamera(cam);
					localvideo.attachCamera(cam);
					localvideodisplay.addChild(localvideo);
				}
				else
				{
					outstream.attachCamera(null);
					localvideo.attachCamera(null);
					localvideodisplay.removeChild(localvideo);
				}
				//Alert.show("Video is "+(isEnable ? "enbaled" : "disabled"));
			}
			
			private function enableAudio(isEnable:Boolean):void
			{
				if(isEnable)
				{
					outstream.attachAudio(mic);
				}
				else
				{
					outstream.attachAudio(null);
				}
				//Alert.show("Audio is "+(isEnable ? "enbaled" : "disabled"));
			}
			
			private function micVolumeChange():void
			{
				micst = new SoundTransform(micvolume.value/100);
				mic.soundTransform = micst;
				mic.gain = micvolume.value;
			}
			
			private function speakerVolumeChange():void
			{	
				speakerst = new SoundTransform(speakervolume.value/100);
				instream.soundTransform = speakerst;
			}	
			
		]]>
	</fx:Script>
	<s:Panel title="P2P网络电话" left="10" right="10" top="10" bottom="20" borderVisible="true" fontFamily="微软雅黑">
		<s:Panel id="_login" includeIn="Login" width="270" height="160" borderAlpha="1.0" horizontalCenter="0" title="登录" verticalCenter="0">
			<s:Label paddingBottom="0" paddingLeft="5" paddingTop="5" text="用户名：" textAlign="center" verticalAlign="middle" x="10" y="10" left="15" top="10" width="75" height="25" fontSize="16"/>
			<s:Label left="15" top="45" width="75" height="25" fontSize="16" paddingBottom="0" paddingLeft="5" paddingTop="5" text="密   码：" textAlign="center" verticalAlign="middle"/>
			<s:TextInput id="username" enter="login()" width="150" paddingLeft="3" paddingTop="5" right="20" top="10" height="25" x="110" y="10"/>
			<s:TextInput id="password" enter="login()" displayAsPassword="true" right="20" top="45" width="150" height="25" paddingLeft="3" paddingTop="5"/>
			<s:Button id="_loginbutton" left="50" bottom="15" width="75" height="30" label="登录" click="login()" fontSize="12"/>
			<s:Button right="50" bottom="15" width="75" height="30" label="注册" click="startRegister()" fontSize="12"/>
		</s:Panel>
		<s:Panel id="_register" includeIn="Register" width="270" height="160" borderAlpha="1.0" horizontalCenter="0" title="注册" verticalCenter="0">
			<s:Label paddingBottom="0" paddingLeft="5" paddingTop="5" text="用户名：" textAlign="center" verticalAlign="middle" x="10" y="10" left="15" top="10" width="75" height="25" fontSize="16"/>
			<s:Label left="15" top="45" width="75" height="25" fontSize="16" paddingBottom="0" paddingLeft="5" paddingTop="5" text="密   码：" textAlign="center" verticalAlign="middle"/>
			<s:TextInput id="registerusername" enter="submitRegister()" width="150" paddingLeft="3" paddingTop="5" right="20" top="10" height="25" x="110" y="10"/>
			<s:TextInput id="registerpassword" enter="submitRegister()" displayAsPassword="true" right="20" top="45" width="150" height="25" paddingLeft="3" paddingTop="5"/>
			<s:Button id="_registerbutton" label="完成注册" click="submitRegister()" fontSize="12" y="50" bottom="15" width="75" height="30" horizontalCenter="0"/>
		</s:Panel>
		<s:Group id="_invite" includeIn="Invite,Called" width="100%" height="100%">
			<s:VGroup width="100%" height="100%" gap="20" horizontalAlign="center"
					  verticalAlign="middle">
				<s:Label id="hint" width="100%" height="50" fontSize="16" text="欢迎使用P2P在线聊天软件" textAlign="center" verticalAlign="middle"/>
				<s:HGroup width="100%" height="40" gap="10" horizontalAlign="center"
						  verticalAlign="middle">
					<s:TextInput id="friendname" width="200" height="30" prompt="请输入需要添加的好友名称" enter="addFriend()"/>
					<s:Button width="75" height="30" label="添加好友" click="addFriend()"/>
				</s:HGroup>
				<s:HGroup width="100%" height="40" gap="10" horizontalAlign="center"
						  verticalAlign="middle">
					<s:DropDownList id="friend" width="200" height="30" dataProvider="{friendlist}" labelField="name" prompt="请选择想要聊天的在线好友"/>
					<s:Button id="invite" height="30" label="邀请" click="startInvite()"
							  width.Invite="75"/>
				</s:HGroup>
			</s:VGroup>
		</s:Group>	
		<s:Panel id="_called" includeIn="Called" width="300" height="160" borderAlpha="1.0" horizontalCenter="0" title="建立会话中" verticalCenter="0">
			<s:Label id="calledtext" left="15" right="15" top="15" height="50" fontSize="16"
					 textAlign="center" verticalAlign="middle"/>
			<s:Button right="50" bottom="15" width="75" height="30" label="拒绝" click="cancelInvite()" fontSize="16"/>
			<s:Button left="50" bottom="15" width="75" height="30" label="接受" click="acceptInvite()" fontSize="16"/>
		</s:Panel>
		<s:Group id="_talk" includeIn="Talk,Setting" width="100%"
				 top="0" bottom="0" enabled.Setting="false" height="100%" enabled.Talk="true">
			<s:VGroup width="390" left="10" top="10" horizontalAlign="center"  gap="10" bottom="10">
				<s:TextArea id="info" left="5" top="275" width="390" height="238" editable="false"
							paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
				<s:HGroup width="100%" left="5" top="65" verticalAlign="middle" gap="10" bottom="0">
					<s:TextInput id="message" width="310" height="50" borderVisible="true" enter="sendMessage()"/>
					<s:Button id="sendmessage" label="发送" height="50" click="sendMessage()"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup right="10" top="10" bottom="10" width="160" gap="14" horizontalAlign="center">
				<s:VideoDisplay id="remotevideodisplay"  width="160" height="120"/>
				<s:HGroup gap.Setting="20"
						  gap.Talk="20">
					<s:Button id="hangup" width="70" height="30" label="挂断" click="cancelInvite()"/>
					<s:Button width="70" height="30" label="设置" click="startSetting()"/>
				</s:HGroup>
				<s:VideoDisplay id="localvideodisplay" width="160" height="120"/>
			</s:VGroup>	
		</s:Group>
		<s:Panel id="_calling" includeIn="Talk" width="300" height="160" borderAlpha="1.0" horizontalCenter="0" title="正在邀请中" verticalCenter="0">
			<s:Label id="callingtext" left="15" right="15" top="15" height="50" fontSize="16"
					 textAlign="center" verticalAlign="middle"/>
			<s:Button label="取消" click="cancelInvite()" fontSize="16" y="50" bottom="15" width="75" height="30" horizontalCenter="0"/>
		</s:Panel>
		<s:Panel id="_setting" includeIn="Setting" width="250" height="250" borderAlpha="1.0"
				 fontSize="14" horizontalCenter="0" title="设置" verticalCenter="0">
			<s:VGroup width="100%" height="100%" gap="10" horizontalAlign="center"
					  verticalAlign="middle">
				<s:HGroup height="30" gap="20" horizontalAlign="center" verticalAlign="middle">
					<s:Label text="视频" textAlign="center" verticalAlign="middle"/>
					<s:HGroup horizontalAlign="center" textAlign="center" verticalAlign="middle">
						<s:RadioButton id="videoenable" groupName="video" selected="true" click="settingVideo(true)"/>
						<s:Label text="开启" textAlign="center" verticalAlign="middle"/>
					</s:HGroup>
					<s:HGroup horizontalAlign="center" verticalAlign="middle">
						<s:RadioButton id="videodisable" groupName="video" selected="false" click="settingVideo(false)"/>
						<s:Label text="关闭" textAlign="center" verticalAlign="middle"/>
					</s:HGroup>
				</s:HGroup>
				<s:HGroup height="30" gap="20" horizontalAlign="center" verticalAlign="middle">
					<s:Label text="音频" textAlign="center" verticalAlign="middle"/>
					<s:HGroup horizontalAlign="center" textAlign="center" verticalAlign="middle">
						<s:RadioButton id="audioenable" groupName="audio" selected="true" click="settingAudio(true)"/>
						<s:Label text="开启" textAlign="center" verticalAlign="middle"/>
					</s:HGroup>
					<s:HGroup horizontalAlign="center" verticalAlign="middle">
						<s:RadioButton id="audiodisable" groupName="audio" selected="false" click="settingAudio(false)"/>
						<s:Label text="关闭" textAlign="center" verticalAlign="middle"/>
					</s:HGroup>
				</s:HGroup>
				<s:HGroup height="30" gap="20" horizontalAlign="center" verticalAlign="middle">
					<s:Label text="麦克风音量" textAlign="center" verticalAlign="middle"/>
					<s:HSlider id="micvolume" minimum="0" maximum="100" value="80" width="124" height="12" changeEnd="micVolumeChange()"/>
				</s:HGroup>
				<s:HGroup height="30" gap="20" horizontalAlign="center" verticalAlign="middle">
					<s:Label text="扬声器音量" textAlign="center" verticalAlign="middle"/>
					<s:HSlider id="speakervolume" minimum="0" maximum="100" value="80" width="124" height="12" changeEnd="speakerVolumeChange()"/>
				</s:HGroup>
				<s:Button width="75" height="30" label="完成" click="endSetting()"/>
			</s:VGroup>		
		</s:Panel>
	</s:Panel>
</s:Application>
